This is the default configuration for Emacs.

* Section 1 [2018-03-18 ÖÜÈÕ 14:29]
** Note
the 'C' in 'C-x' means 'Control key'
the 'M' in 'M-x' means 'Alt key'

'C-g' exit or cancels the current command.  

eg. 'C-x C-s' save current buffer/file. If I entered 'C-x' and changed
my mind, I can enter 'C-g' to exit this command.

** Step

1. Section One: Move cursor around
   1) move one line up: C-p
   2) move one line down: C-n
   3) move one character forward: C-f
   4) move one character backward: C-b
   5) move one word forward: M-f
   6) move one word backward: M-b
   7) move to the beginning of current line: C-a
   8) move to the end of current line: C-e
2. Section Two:  save(as)/open/find a file
   1) write current buffer to a file: C-x C-w then enter the file path and name. I save this buffer to
      d:/emacs-25.2-x86_64/bin/turorial.xxx
   2) save file: C-x C-s
   3) kill buffer: C-x k
   4) find/open file: C-x C-f

* Section 2 [2018-03-18 ÖÜÈÕ 14:55]
** Step
In this section, I will introduce how to add ELPA repository and install an Emacs theme.

1. configure ELPA repository
   1) create an Emacs initialization file: ~/.emacs.d/init.el
   2) go to: http://elpa.emacs.china.org/ and copy the code snippet to init.el
   3) Eval the init.el buffer
2. Install an Emacs theme package
   1) 'M-x list-packages' to list all of the Emacs packages of archives online
   2) choose a theme package and type 'i' to select it
   3) type 'x' to start installing package
   4) load the theme in your 'init.el'
   5) 'M-x eval-buffer' to reload 'init.el' file

Now, Emacs looks better. :P
* Section 3 [2018-03-18 ÖÜÈÕ 15:49]
** Step
In this video, I'll introduce how to disable toolbar and menubar.

We use two functions here: tool-bar-mode and menu-bar-mode.

How to exit emacs? The shorcut is: 'C-x C-c'

How to create another window? 

1. create another window horizontally: 'C-x 2'
2. create another window vertically: 'C-x 3'
3. switch to another window: 'C-x o' ('o' means 'other')
4. close other windows except current one: 'C-x 1'

How to navigate to the begining of the current buffer? 'M-<'

How to navigate to the end of the current buffer? 'M->'
* Section 4 [2018-03-18 ÖÜÈÕ 16:01]
In this section, I'll introduce how to install some packages I love.

1. use-package: install and manage other packages
2. magit: use git in Emacs
3. lispy: write lisp code

Now I will use magit to create a repository and make a commit. Great!

using lispy, we can navigate in lisp code smoothly. :)
* Section 5 [2018-03-18 日 19:46]
Today, I'll introduce how to set font in Emacs and use magit plugin.

1. set font using 'default-frame-alist' variable
2. using magit
   1) add a remote repository for this repository
   2) we use 'https://github.com/CSU-NXY/emacs.git' as your remote repository
   3) pull commits from origin and push local commits to remote repo
      - We have unstaged changes. We stash them now.
   4) we pull with rebase enabled and there's conflict
   5) let's solve conflict now
      - now changes in stash@{1} is merged to your stage
      - we drop it now
      - now we apply stash@{0}
      - no conflict
      - commit it now
      - drop stash@{0}
   6) push our changes to remote repository
   7) I want to put the changes to the latest commit using rebase
* Section 6 [2018-03-18 日 21:50]
In this section, I'll introduce how to use magit in an organized way.

1. create an empty repository
2. create a file in this repo
3. stage untracked files
4. show staged changes
5. show unstaged changes
6. commit staged changes
7. show log history
8. stage and unstage changes
9. move changes to a stash
10. pop a stash: if we pop a stash, the stash is poped from the
    Stashed
11. apply a stash: if we apply a stash, the stash is kept in Stashes
    for future use
12. create and checkout a new branch
13. make a new commit in new branch
14. checkout to another branch
15. merge sub branch to master branch
* Section 7 [2018-03-18 日 22:53]
Today, I'll introduce how to look up info file in Emacs.

1. Read Emacs manual: 'C-h i m Emacs'
2. Read Emacs Lisp Intro: 'C-h i m elisp'
3. lookup a variable: 'C-h v'
4. lookup a function: 'C-h f'

Now, I'll show how to navigate in the info file.

I'll try to show it slower.. :)
* Section 8 [2018-03-19 一 09:35]
In this section, I'll introduce how to install and use swiper plugin.

using swiper, ivy and counsel. We can use completion in mode line more
easily.   :)

How to make emacs transparent?
* Section 9 [2018-03-19 一 12:03]
I have installed compton and Emacs has transparency now!

Let's change a light theme

Update packages.

Install hydra package.

Install ace-window package.
* Section 10 [2018-03-19 一 20:09]
In this section, I'll introduce how to install yasnippet.

Let's use it to write C++ programs.

Let's disable scrool bar. Now scroll bar on the right disappeared.

Bye! See you next time. :-)
* Section 11 [2018-03-19 一 20:43]
Today, I'll introduce how to use abbrev.

e.g. sig-> abel<abel-abel@gmx.com> 

1. 'C-x a g'
2. 'C-u _n_ C-x a g'
3. 'M-x define-global-abbrev'
4. insert prefix, then 'M-'' and insert abbrev
5. 'M-x expand-region-abbrevs'
6. 'kill-all-abbrevs'

Bye! See you Next time!
* Section 12 [2018-03-19 一 21:10]
In this section, I'll introduce how to use macro in Emacs.

1. '<f3>' start macro definition
2. '<f4>' end macro definition or execute last defined macro
3. 'C-u _n_ <f4>' execute last defined macro n times
4. 'C-x C-k r' execute last defined macro at the beginning of each
   line of the region

e.g. I will delete all of the ';' at the *scratch* buffer

Bye! See you next time!
* Section 13 [2018-03-19 Mon 22:15]
In this section, I'll introduce how to use bookmark and register.

1. bookmark
   1) show bookmark list: 'C-x r l'
   2) create a bookmark: 'C-x r m'
2. register
   1) save a piece of text to a register: 'C-x r s _c_' _c_ is a
      register name: numbers/characters, case matters.
   2) insert content of a register to buffer: 'C-x r i _c_'

There are other uses of register. I'll introduce that in fure. :)

Bye! See you next time!
* Section 14 [2018-03-19 Mon 22:36]
In this section, I'll introduce how to use mark ring and register to
store/jump to specific location.

1. use mark ring to jump to history positions.
   1) 'C-SPC C-SPC' to push a mark to ring
   2) 'C-u C-SPC' to pop a mark and jump to that position
   3) Every buffer has its own mark ring
   4) set variable 'set-mark-command-repeat-pop' to customize behavior
      'C-SPC'. It means that we don't have to type 'C-u C-SPC'
      everytime after the first 'C-u'

Now, I have set 'set-mark-command-repeat-pop' to t. Let's have a
try. It's better!

- use register to save position.
  1) 'C-x r SPC _c_' save current position to buffer _c_. _c_ is the
     buffer name which could be number, upper/lower characters.
  2) 'C-x j _c_' to jump to the position that the register saved.

I's very useful when you read code or refactor code. :-)

Bye! See you next time!
* Section 15 [2018-03-20 Tue 10:16]
Today, I'll introduce how to use rectangle in Emacs.

region-rectangle is specified by the mark at one corner and point at
the opposite corner

1. 'C-x r M-w' save a region-rectangle
2. 'C-x r y' yank the last region-rectangle
3. 'C-x r N' insert line numbers at beginning of each line of
   region-rectangle
4. 'C-x r c' clean the region-rectangle by replacing the contents with
   spaces
5. 'C-x r k' kill the region-rectangle and save it to the last killed
   rectangle
6. 'C-x r d' delete the region-rectangle WITHOUT saving it to the last
   killed rectangle
7. 'C-x r o' insert spaces to fill the space of region-rectangle
8. 'C-x <SPC>' toggle rectangle mode

Bye! See you next time!

* Section 16 [2018-03-20 Tue 12:23]
In this section, I'll introduce how to use org-mode in Emacs.

The current file is a org file. org-mode is enabled.

1. 'M-x org-mode' enable org-mode
2. 'M-Enter' create another title with the same level
3. 'S-right/left' toggle current item with 'TODO', 'DONE' and nothing
4. 'M-right/left' change item level
5. 'M-S-Enter' create a TODO item
6. 'S-right/left' cycle different style of numbered/ordered lists
7. 'C-c C-p' jump back to upper item
8. 'C-c C-n' jump forward to lower item
9. 'C-c C-b' jump back to upper item with the same level
10. 'C-c C-f' jump forward to lower item with the same level
11. 'C-c C-u' jump to parent item
12. 'C-u C-c !' insert timestamp
13. 'C-c C-x C-i' clock in
14. 'C-c C-x C-o' clock out

Bye! See you next time!
* Section 17 [2018-03-20 Tue 10:46]

In this section, I'll introduce how to search text in Emacs.

1. 'C-s' begin incremental search
   - I bind 'C-s' to swiper in my configuration, I'll disable it
     now. Restrat Emacs.
2. type 'C-x' again to jump to next match
3. 'C-r' begin reverse incremental search
4. type 'C-s C-s' or 'C-r C-r' to use last used string
5. '<DEL>' jump backward when searching
6. '<ENTER>' to exit search and stay at the current position
7. 'C-g' exit search and return to the point when start search
8. 'C-u C-<SPC>' to return to where you were before searching
9. 'M-e' to edit search string when searching
10. 'C-w' append the next word at point to searching
11. 'C-M-w' delete the last character from the searching string
12. 'C-M-y' append the character after point to the searching string
13. 'M-s C-e' append the rest of the current to the searching string

Bye! Thank you for your time! See you next time! :-)
* Section 18 [2018-03-20 Tue 14:13]
In this section, I'll introduce what you can do in Emacs when you get
bored. :-)

'C-u _n_ M-x hanoi' _(:3」∠)_
* Section 19 [2018-03-20 Tue 14:20]
In this section, I'll introduce indentation in Emacs

1. 'C-M-\' indent all lines in the region
2. 'C-x <TAB>' change indentation of all lines of the region
   interactively using '<LEFT>/<RIGHT>' or 'S-<LEFT>/<RIGHT>'. This
   command can accept a prefix number argument. We can use a large
   negative number to delete all the indentation
3. 'C-M-o' split the current line at point
4. 'M-^' merge the previous and current line
5. 'M-m' move to the first non-whitespace character on current line
6. 'M-i' indent whitespace at point
7. 'tabify' convert spaces in the region to 'TAB'
8. 'untabify' convert 'TAB' in the region to spaces

Bye! Thank you for your time!
See you next time! :-)
* Section 20 [2018-03-20 Tue 14:50]
In this section, I will introduce dired-mode a little.

1. 'C-x d' Enter dired
2. 'm' mark file or dirs. If there is a region, mark all file or dirs
   in the region
3. '<DEL>' move to previous line and unmark file or dirs
4. 'f' or '<ENTER>' visit file
5. 'n' next line
6. 'p' previous line
7. 'g' refresh list of file and dirs
8. 'd' mark file or dir to delete
9. 'x' delete marked file or dirs
10. 'u' remove mark
11. '+' create a directory
12. '^' move to parent dirctory
13. 'C' copy a file
14. 'R' rename a file or directory
15. 'v' view file or dir without editing it
16. '~' mark back files

